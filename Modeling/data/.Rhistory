in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot0 <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot0
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot0 <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot0
grid.arrange(plot, plot0, nrow = 1)
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
plot0 <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(plot, plot0, nrow = 1)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part9__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch1__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p
grid.arrange(p, p, nrow = 1)
fn = 'N_part1__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch100__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p
plot <- ggplot(df, aes(y = P_ams, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot
plot <- ggplot(df, aes(y = N_ams, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
plot
grid.arrange(p, p_P, p_N, ncol = 1)
p_P <- ggplot(df, aes(y = P_ams, x = factor(q_remap))) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = N_ams, x = factor(q_remap))) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
p_P <- ggplot(df, aes(y = P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
fn = 'N_part1__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch200__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
# geom_point()+
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p
p_P <- ggplot(df, aes(y = P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
d_summary = ddply(df,.(P_ams, N_ams), summarise)
d_summary = ddply(df,.(q_remap), summarise)
d_summary = ddply(df, ~q_remap, summarize)
ddply(df, ~q_remap, summarize)
df
d_summary = ddply(df, "q_remap", summarize)
d_summary = ddply(df, "q_remap", summary)
d_summary
ddply(df, ~q_remap, summary)
d_summary = ddply(df, ~q_remap, norm_P = mean(P_ams), norm_N = mean(N_ams), norm = mean(hrms))
d_summary
ddply(df, ~q_remap, norm_P = mean(P_ams), norm_N = mean(N_ams), norm = mean(hrms))
ddply(df, ~q_remap, summarize, norm_P = mean(P_ams), norm_N = mean(N_ams), norm = mean(hrms))
d_summary = ddply(df, ~q_remap, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
d_summary
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
d_summary
sum(d_summary)
sum(d_summary$mean_P)
sum(d_summary$mean_N)
sum(d_summary$mean)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part1__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch200__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.3))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
(sum(d_summary$mean_P))
(sum(d_summary$mean_N))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
library(jsonlite)
library(ggplot2)
require(gridExtra)
library(plyr)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part1__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch200__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
fn = 'N_part5__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch180__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
fn = 'N_part5__expt_nameCommon_effect__NHID3__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch180__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
fn = 'N_part5__expt_nameCommon_effect__NHID4__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch210__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
fn = 'N_part23__expt_nameCommon_effect__NHID4__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch210__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("True probs") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
library(jsonlite)
library(ggplot2)
require(gridExtra)
library(plyr)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part23__expt_nameCommon_effect__NHID4__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch210__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Exaggerate edge bias with pos corr AB") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Reduce edge bias with neg corr AB") +
theme(axis.text.x = element_blank())
grid.arrange(p_P, p_N, ncol = 1)
library(jsonlite)
library(ggplot2)
require(gridExtra)
library(plyr)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part23__expt_nameCommon_effect__NHID4__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch210__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Exaggerate edge bias with pos corr AB") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Reduce edge bias with neg corr AB") +
theme(axis.text.x = element_blank())
p0 = grid.arrange(p_P, p_N, ncol = 1)
ggsave(file = "diff_preds.png", p0)
p0
?apply
?if
library(jsonlite)
library(ggplot2)
require(gridExtra)
library(plyr)
setwd("~/GitHub/causal_markov/Modeling/data")
fn = 'N_part23__expt_nameCommon_effect__NHID4__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch210__train_lr0.02__train_blocks200__plot_data'
CE_data <- fromJSON(txt=fn)
binary = seq(0, 7)
in_paper = c(0, 3, 2, 6, 1, 5, 4, 7)
df = as.data.frame(CE_data)
df$q_remap <- mapvalues(CE_data$q, from = binary,
to = in_paper)
# p <- ggplot(df, aes(y = hrms, x = factor(q_remap))) +
#   # geom_point()+
#   geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
#   ylim(c(-0, 0.3))  + ggtitle("True probs") +
#   theme(axis.text.x = element_blank())
# p
d_summary = ddply(df, ~q_remap, summarize, mean_P = mean(P_ams), mean_N = mean(N_ams), mean = mean(hrms))
df$norm_P_ams = df$P_ams/(sum(d_summary$mean_P))
df$norm_N_ams = df$N_ams/(sum(d_summary$mean_N))
df$norm_hrms = df$hrms/(sum(d_summary$mean))
p_P <- ggplot(df, aes(y = norm_P_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Exaggerate edge bias with pos corr AB") +
theme(axis.text.x = element_blank())
p_N <- ggplot(df, aes(y = norm_N_ams, x = factor(q_remap))) +
geom_boxplot(outlier.shape = NA,outlier.colour = NA) +
geom_point(mapping = aes(x = factor(q_remap), y = norm_hrms)) +
ylim(c(-0, 0.5))  + ggtitle("Reduce edge bias with neg corr AB") +
theme(axis.text.x = element_blank())
p0 = grid.arrange(p_P, p_N, ncol = 1)
ggsave(file = "diff_preds.png", p0)
p0
sym_bins = c(0, 1, 6, 7)
classify <- function(a){
if (a %in% sym_bins){
return ('Sym')
} else{
return ('Asym')
}
}
df$symm <- sapply(df$q_remap,classify )
df$symm
df$symt <- sapply(df$q_remap,classify)
?rep
df0$diffPs <- c(df$norm_N_ams - df$norm_hrms, df$norm_P_ams- df$norm_hrms)
df0$condition <- rep(c('Neg', 'Pos'), each = length(df$q))
df0 = data.frame()
df0$diffPs <- c(df$norm_N_ams - df$norm_hrms, df$norm_P_ams- df$norm_hrms)
df0 = data.frame(diffPs <- c(df$norm_N_ams - df$norm_hrms, df$norm_P_ams- df$norm_hrms),
condition <- rep(c('Neg', 'Pos'), each = length(df$q)),
symt <- c(sapply(df$q_remap,classify), sapply(df$q_remap,classify))
)
?sd
df_sum <- ddply(df0, .(condition, symt), mean = mean(diffPs), sd = sd(diffPs))
p <- ggplot(df_sum, aes(x=condition, y=mean, fill=symt)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
df_sum
df_sum <- ddply(df0, .(condition, symt), summarize, mean = mean(diffPs), sd = sd(diffPs))
df_sum
df0 = data.frame(diffPs <- c(df$norm_N_ams - df$norm_hrms, df$norm_P_ams- df$norm_hrms),
condition <- rep(c('Neg', 'Pos'), each = length(df$q)),
symt <- c(sapply(df$q_remap,classify), sapply(df$q_remap,classify))
)
df_sum <- ddply(df0, .(condition, symt), summarize, mean = mean(diffPs), sd = sd(diffPs))
p <- ggplot(df_sum, aes(x=condition, y=mean, fill=symt)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
sapply(df$q_remap,classify
